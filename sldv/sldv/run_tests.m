%% Run the tests generated by SLDV

function run_tests(mdl, sldv_data_file, coverage_report, model_results, model_name, harness, system_under_test, ...
                    unit_test_dir, opts)
% -------------------------------------------------------------------------------------------------------------------
% Enable data logging
% -------------------------------------------------------------------------------------------------------------------
% Get the block and port handles
block_handles = find_system(mdl, 'Type', 'Block');
num_blocks = numel(block_handles);
for blk_idx = 1:num_blocks
    ph = get_param(block_handles(blk_idx), 'PortHandles');
    if isempty(ph.Outport) == false
        ph.Outport;
        set_param(ph.Outport, 'DataLogging', 'on');
    else
        % skip the model's output pins
    end
end

% -------------------------------------------------------------------------------------------------------------------
% Get the number of test cases that were generated and the number of input and output signals
% -------------------------------------------------------------------------------------------------------------------
% TODO: Can some of this be consolidated with above code?
matObj = matfile(sldv_data_file);
m = matObj.sldvData;
tc = m.('TestCases');
num_testcases = numel(tc);
info = m.('AnalysisInformation');
in_port = info.InputPortInfo;
out_port = info.OutputPortInfo;
num_signals_out = numel(out_port);
num_signals_in = numel(in_port);

% -------------------------------------------------DEV---------------------------------------------------------------
% Enable to write input attributes to unit test template
% -------------------------------------------------------------------------------------------------------------------
%block_path_arr = {};
%signal_labels_arr = {};
%data_type_arr = {};
%complexity_arr = {};
%sample_time_arr = {};
%
%for idx = 1:numel(in_port)
%    block_path = info.InputPortInfo{idx}.BlockPath;
%    signal_labels = info.InputPortInfo{idx}.SignalLabels;
%%    signal_name = info.InputPortInfo{idx}.SignalName;
%    data_type = info.InputPortInfo{idx}.DataType;
%    complexity = info.InputPortInfo{idx}.Complexity;
%    sample_time = info.InputPortInfo{idx}.SampleTime;
%%    signal_hierarchy = info.InputPortInfo{idx}.SignalHierarchy;
%    block_path_arr(end + 1) = cellstr(block_path);
%    signal_labels_arr(end + 1) = cellstr(signal_labels);
%    data_type_arr(end + 1) = cellstr(data_type);
%    complexity_arr(end + 1) = cellstr(complexity);
%%    sample_time_arr(end + 1) = num2cell(sample_time) % , num_signals_in);
%end
%% Write inputs to unit test template
%%p = path/to/the/unit/test/template
%p = fullfile(unit_test_dir, 'ut_dev.xlsx');
%block_path_vec = block_path_arr';
%signal_labels_vec = signal_labels_arr';
%data_type_vec = data_type_arr';
%complexity_vec = complexity_arr';
%sample_time_vec = sample_time_arr';
%writecell(block_path_vec, p, 'Sheet', 'INPUTS', 'Range', 'A2');  % BLOCK PATH
%writecell(signal_labels_vec, p, 'Sheet', 'INPUTS', 'Range', 'B2');  % SIGNAL LABEL
%writecell(data_type_vec, p, 'Sheet', 'INPUTS', 'Range', 'C2');  % DATA TYPE
%writecell(complexity_vec, p, 'Sheet', 'INPUTS', 'Range', 'D2');  % COMPLEXITY
%writecell(sample_time_vec, p, 'Sheet', 'INPUTS', 'Range', 'E2');  % SAMPLE TIME
% -------------------------------------------------END---------------------------------------------------------------

% -------------------------------------------------------------------------------------------------------------------
% Set options and run tests
% -------------------------------------------------------------------------------------------------------------------
runOpts = sldvruntestopts;
runOpts.coverageEnabled = true;  % Put in constants.py
[outData, covData] = sldvruntest(mdl, sldv_data_file, runOpts);
cvhtml(coverage_report, covData);
%cvsave('C:\Users\mwilliams\SLDV\results\sldvexFloatingPointErrorChecks\existing_coverage.cvt', covData);
cvsave(fullfile(model_results, 'existing_coverage.cvt'), covData);

%% -------------------------------------------------------------------------------------------------------------------
%% Get I/O data for each test case
%% -------------------------------------------------------------------------------------------------------------------
for tidx = 1:num_testcases

    % Inputs per test case
    test_case = tc(tidx).('testCaseId');
    var_names_in = {'Time'};
    time_values_in = tc(tidx).('timeValues')';  % column vector
    data_values_in = tc(tidx).('dataValues');
    [steps_in, nc_in] = size(time_values_in);
    in_arr = zeros(steps_in, num_signals_in + 1);
    in_arr(1:steps_in, 1) = time_values_in;

    % Outputs per test case
    var_names_out = {'Time'};
    time_values_out = outData(tidx).find('tout_sldvruntest')';  % column vector
    data_values_out = outData(tidx).find('yout_sldvruntest');
%    xout = outData(tidx).find('xout_sldvruntest'); % state data
    logsout = outData(tidx).find('logsout_sldvruntest');
    num_elements = logsout.numElements();
    [~, steps_out] = size(time_values_out);
    out_arr = zeros(steps_out, num_signals_out + 1);
    out_arr(1:steps_out, 1) = time_values_out;

    % Intermediates per test case
    inter_arr = zeros(steps_out , num_elements + 1);
    inter_arr(1:steps_out, 1) = time_values_out;
    block_name_arr = {};

    % Inputs per signal for the current test case
    for sidx_in = 1:num_signals_in
        info_cell = in_port(sidx_in);
        block_path = cell2mat(info_cell).('BlockPath');
        [block, signal_in] = fileparts(block_path);
        data_vec_in = cell2mat(data_values_in(sidx_in))';   % column vector
        in_arr(1:steps_in, sidx_in + 1) = data_vec_in;
        var_names_in(end + 1) = cellstr(signal_in);
    end

    % Outputs per signal for the current test case
    for sidx_out = 1:num_signals_out
        [model, signal_out] = fileparts(data_values_out.signals(sidx_out).blockName);
        data_vec_out = data_values_out.signals(sidx_out).values;
        out_arr(1:steps_out, sidx_out + 1) = data_vec_out;
        var_names_out(end + 1) = cellstr(signal_out);
    end

    % Intermediate values per block for the current test case
    for eidx = 1:num_elements

        % ---------------------------------------DEV--------------------------------------------------------------
        % is_system_output = contains(logsout{eidx}.Name, "dvOutputSignalLogger");
        % ---------------------------------------END--------------------------------------------------------------

        bp = logsout{eidx}.BlockPath;
        [~, block_name] = fileparts(bp.getBlock(1));

        block_data = logsout{eidx}.Values.Data;
        inter_arr(1:steps_out, eidx + 1) = block_data;

        % Get the index of the duplicate name and count the number of occurences
        idx = find(strcmpi(block_name_arr, block_name));
        num_occur = nnz(strcmp(block_name_arr, block_name));
        num_occur_str = num2str(num_occur);
        num_occur_cat = strcat('_', num_occur_str);

        if num_occur == 0
            block_name_unique = block_name;
        else
            block_name_unique = insertAfter(block_name, block_name, num_occur_cat);
        end

        block_name_arr(end + 1) = cellstr(block_name_unique);
    end

    % Write inputs to unit test template
    in_table = array2table(in_arr, 'VariableNames', var_names_in);
    writetable(in_table, fullfile(model_results, insertBefore('_UT.xls', '_', model_name)),...
    'Sheet', insertAfter('TC_in', 'C', num2str(test_case)));

    % Write outputs to unit test template
    out_table = array2table(out_arr, 'VariableNames', var_names_out);
    writetable(out_table, fullfile(model_results, insertBefore('_UT.xls', '_', model_name)),...
    'Sheet', insertAfter('TC_out', 'C', num2str(test_case)));

    % Write intermediate values to unit test template
    final_name_arr = [{'Time'}, block_name_arr];  % Concat with time
    inter_table = array2table(inter_arr, 'VariableNames', final_name_arr);
    writetable(inter_table, fullfile(model_results, insertBefore('_UT.xls', '_', model_name)),...
    'Sheet', insertAfter('TC_all', 'C', num2str(test_case)));
end
